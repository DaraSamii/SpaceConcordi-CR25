#!/bin/bash
#SBATCH --job-name=CR25
#SBATCH --mem=48G
#SBATCH --nodes=1
#SBATCH --ntasks=36
#SBATCH --cpus-per-task=1
#SBATCH --time=7:0:0    
#SBATCH --mail-user=darasamii@gmail.com
#SBATCH --mail-type=ALL
#SBATCH --account=def-tembelym
#SBATCH --output=submit.out



# Source the OpenFOAM environment (modify as needed)
if module avail openfoam/v2406 &>/dev/null; then
    module load openfoam/v2406
    echo "OpenFOAM v12 module loaded successfully."
else
    op2406
    #op11
    echo "Using OpenFOAM op11."
fi

cd ${0%/*} || exit 1    # Run from this directory

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Source tutorial clean functions
. $WM_PROJECT_DIR/bin/tools/CleanFunctions

cleanCase

rm -r ./0 ./processor*/

cp -r ./0.orig ./0

# Remove and recreate logs directory
if [ -d "logs" ]; then
    echo "Removing existing logs directory..."
    rm -r logs
fi

mkdir -p logs
echo "Logs directory created."

# Touch foam.foam for ParaView compatibility
touch foam.foam


if module avail openfoam/11 &>/dev/null; then
    numProcs=36  # Server
else
    numProcs=4  # Local machine
fi

# ============================
# Modify decomposeParDict
# ============================

echo "Updating decomposeParDict for $numProcs processors..."
foamDictionary system/decomposeParDict -entry "numberOfSubdomains" -set "$numProcs"

#------------------------------------------------------------------------------
# Step 1: Generate base mesh
blockMesh 2>&1 | tee ./logs/log.blockMesh;

# Step 2: Extract surface features
#surfaceFeatureExtract 2>&1  | tee ./logs/log.surfaceFeatures;

# Step 3: Decompose the domain for parallel processing
decomposePar -copyZero 2>&1  | tee ./logs/log.decomposePar;

# Step 4: Run snappyHexMesh in parallel on 4 cores
mpirun -np $numProcs snappyHexMesh -overwrite -parallel 2>&1  | tee ./logs/log.snappyHexMesh;

mpirun -np $numProcs snappyHexMesh -dict ./system/snappyHexMeshDictLayer -overwrite -parallel 2>&1  | tee ./logs/log.snappyHexMeshLayer;
# Optional Step 5: Reconstruct the final mesh (combine into single mesh)
#reconstructPar -constant 2>&1  | tee ./logs/log.reconstructPar;
reconstructParMesh -constant 2>&1  | tee ./logs/log.reconstructPar;


rm -r processor*

renumberMesh -overwrite 2>&1 | tee logs/log.renumberMesh;

#Speed steps
decomposePar 2>&1  | tee ./logs/log.decomposePar2;


echo "Checking the mesh quality..."

mpirun -np $numProcs checkMesh -parallel 2>&1 | tee logs/log.checkMesh


mpirun -np $numProcs checkMesh -allGeometry -allTopology -parallel 2>&1 | tee logs/log.checkMeshAllTopology

# Step 5: Create foam.foam for visualization
echo "Creating foam.foam for visualization..."
for d in processor*; do touch "$d/foam.foam"; done


# Step 6: Run the solver in parallel
echo "Running rhoPimpleFoam in parallel..."
mpirun -np $numProcs rhoSimpleFoam -parallel 2>&1 | tee logs/log.rhoSimpleFoam

#mpirun -np $numProcs foamRun -parallel 2>&1  | tee ./logs/log.foamRun;