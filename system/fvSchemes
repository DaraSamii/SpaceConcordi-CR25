/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

crankNicolsonCoeff  0.5;

ddtSchemes
{
    default         CrankNicolson $crankNicolsonCoeff; // Replace <coeff> with your desired blending factor, e.g., 0.5
    ddt(rho)        CrankNicolson $crankNicolsonCoeff;
    ddt(U)          CrankNicolson $crankNicolsonCoeff;
    ddt(h)          CrankNicolson $crankNicolsonCoeff;
    ddt(e)          CrankNicolson $crankNicolsonCoeff;
    ddt(T)          CrankNicolson $crankNicolsonCoeff;
    ddt(phi)        CrankNicolson $crankNicolsonCoeff;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default             none;

    div(phi,U)          Gauss limitedLinearV 1;
    div(phi,e)          Gauss limitedLinear 1;
    div(phid,p)         Gauss limitedLinear 1;
    div(phi,K)          Gauss limitedLinear 1;
    div(phi,(p|rho))    Gauss limitedLinear 1;
    div(phi,k)          Gauss upwind;
    div(phi,epsilon)    Gauss upwind;

    div(phi,U)      bounded Gauss linear;
    div(div(phi,U)) Gauss linear;

    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear limited corrected 0.5;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}


// ************************************************************************* //
