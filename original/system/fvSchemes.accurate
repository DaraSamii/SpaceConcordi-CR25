/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1806                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

fluxScheme          Tadmor; // Kurganov;

ddtSchemes
{
    default         Euler; // steadyState; // localEuler; // steadyState;
}

gradSchemes
{
    default         cellLimited Gauss linear 1;
    grad(p)         cellLimited Gauss linear 1;
    limitedGradFace     faceLimited Gauss linear 1;
    limitedGrad     cellLimited Gauss linear 1;

}

divSchemes
{
    default         none;
	
    div(phi,U)      bounded Gauss linearUpwindV limitedGradFace;//linearUpwindV limitedGrad; // vanLeerV; //upwind; //limitedLinearV 1.0; //linearUpwindV limitedGrad; //limitedLinearV 1.0;
	
    div(phi,e)      Gauss linearUpwind limitedGrad;//upwind; //vanLeer; // upwind; // linearUpwind limitedGrad;
    div(phi,Ekp)    Gauss linearUpwind limitedGrad;//upwind; //vanLeer; // linearUpwind limitedGrad;
    
    div(phi,h)      bounded Gauss linearUpwind limitedGrad;//upwind; //linearUpwind limitedGrad; // vanLeer; // upwind; // linearUpwind limitedGrad;
    
    div(phi,K)      bounded Gauss linearUpwind limitedGrad;//upwind; //linearUpwind limitedGrad; // vanLeer; // upwind; // linearUpwind limitedGrad;
	
    div(phid,p)     Gauss upwind; //linearUpwind limitedGrad; // vanLeer; // upwind; // linearUpwind limitedGrad;
 
    //div((phi|interpolate(rho)),p) Gauss upwind;
	
    div(phi,k)      bounded Gauss linearUpwind limitedGrad; //linearUpwind limitedGrad; // vanLeer; // upwind;
    div(phi,omega)  bounded Gauss linearUpwind limitedGrad; //linearUpwind limitedGrad; // vanLeer; // upwind;
    
    div(phi,nuTilda) bounded Gauss linearUpwind limitedGrad; // vanLeer; // upwind;
    div(phi,epsilon) bounded Gauss linearUpwind limitedGrad;
	
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

    // div(tauMC)       Gauss limitedLinear phi 1.0;
}

laplacianSchemes
{
    default         Gauss linear limited 0.5;
}

interpolationSchemes
{
    default         linear;
/*
    reconstruct(U)   upwind; //vanLeerV; //limitedLinearV 1.0;
    reconstruct(T)   upwind; //limitedVanLeer 101.01 2500;
    reconstruct(rho) upwind; //limitedVanLeer 0.00001 10;
*/
}

snGradSchemes
{
    default         limited 0.5;
}

fluxRequired
{
	pCorr;
}

wallDist
{
    method   meshWave;
}


// ************************************************************************* //
