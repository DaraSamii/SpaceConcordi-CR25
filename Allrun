#!/bin/bash
#SBATCH --job-name=CR25
#SBATCH --mem=32G
#SBATCH --nodes=1
#SBATCH --ntasks=27
#SBATCH --cpus-per-task=1
#SBATCH --time=7:0:0    
#SBATCH --mail-user=darasamii@gmail.com
#SBATCH --mail-type=ALL
#SBATCH --account=def-tembelym
#SBATCH --output=submit.out



# Source the OpenFOAM environment (modify as needed)
if module avail openfoam/12 &>/dev/null; then
    module load openfoam/12
    echo "OpenFOAM v12 module loaded successfully."
else
    op11
    echo "Using OpenFOAM op11."
fi

cd ${0%/*} || exit 1    # Run from this directory

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Source tutorial clean functions
. $WM_PROJECT_DIR/bin/tools/CleanFunctions

cleanCase

rm -f ./0/*.gz

cp -r ./0.org ./0

rm -r /processor*/
# Remove and recreate logs directory
if [ -d "logs" ]; then
    echo "Removing existing logs directory..."
    rm -r logs
fi
mkdir -p logs
echo "Logs directory created."

# Touch foam.foam for ParaView compatibility
touch foam.foam


cd ${0%/*} || exit 1    # Run from this directory

mkdir -p logs


if module avail openfoam/11 &>/dev/null; then
    numProcs=27  # Server
    divs="(3 3 3)"  # Adjust for server
else
    numProcs=4  # Local machine
    divs="(2 2 1)"  # Adjust for local machine
fi

# ============================
# Modify decomposeParDict
# ============================

echo "Updating decomposeParDict for $numProcs processors..."
foamDictionary system/decomposeParDict -entry "numberOfSubdomains" -set "$numProcs"
foamDictionary system/decomposeParDict -entry "hierarchicalCoeffs/n" -set "$divs"

#------------------------------------------------------------------------------
# Step 1: Generate base mesh
blockMesh 2>&1 | tee log.blockMesh;

# Step 2: Extract surface features
surfaceFeatures 2>&1  | tee ./logs/log.surfaceFeatures;

# Step 3: Decompose the domain for parallel processing
decomposePar -copyZero 2>&1  | tee ./logs/log.decomposePar;

# Step 4: Run snappyHexMesh in parallel on 4 cores
mpirun -np $numProcs snappyHexMesh -overwrite -parallel 2>&1  | tee ./logs/log.snappyHexMesh;

# Optional Step 5: Reconstruct the final mesh (combine into single mesh)
reconstructPar -constant 2>&1  | tee ./logs/log.reconstructPar;


rm -r processor*

renumberMesh -overwrite 2>&1 | tee logs/log.renumberMesh;

#Speed steps
decomposePar 2>&1  | tee ./logs/log.decomposePar2;


mpirun -np $numProcs foamRun -parallel 2>&1  | tee ./logs/log.foamRun;