FoamFile
{
    version         2;
    format          ascii;
    class           dictionary;
    object          snappyHexMeshDict;
}




// Exported by SnappyHexMesh GUI add-on for Blender v1.8
// Source file: C:\Users\pdh24\Desktop\Concordia Classes\Rockets\blend\CR-25 medium mesh.blend
// Export date: 2024-08-18 19:03:03.953247

// Details about SnappyHexMesh parameters can be found in annotated caseDicts:
// - For openfoam.org (development version), see
//   https://github.com/OpenFOAM/OpenFOAM-dev/blob/master/etc/caseDicts/annotated/snappyHexMeshDict
// - For openfoam.com (development version), see
//   https://develop.openfoam.com/Development/openfoam/-/blob/master/etc/caseDicts/annotated/snappyHexMeshDict
// See also links in https://openfoamwiki.net/index.php/SnappyHexMesh

#include "parameters.cs";

castellatedMesh false;
snap            false;
addLayers       true;

mergePatchFaces false;  // Avoid face merging to increase layer coverage

geometry
{
    rocket
    {
        type triSurfaceMesh;
        file "RocketV4.stl";
        // Min Bounds = [ 9.50825e-07 -7.36521e-02 -1.24298e-01]
        // Max Bounds = [ 3.23994e+00  1.41840e-01  1.24298e-01]
        // Area = 1.14863e+00
    }
}

castellatedMeshControls
{
    maxLocalCells   100000;
    maxGlobalCells  5000000;
    minRefinementCells 10;
    maxLoadUnbalance 0.1;
    nCellsBetweenLevels 4;
    locationInMesh (-1 0 0);
    allowFreeStandingZoneFaces true;
    resolveFeatureAngle 130;
    // useLeakClosure true; // OpenFOAM.com option
    handleSnapProblems true;
    useTopologicalSnapDetection true;

    features
    (
        {
            file "RocketV4.eMesh";
            level 6;
        }

    );

    refinementSurfaces
    {
        rocket
        {
            level (4 6);
            patchInfo { type wall; }
            
        }

    }

    refinementRegions
    {
        rocket
        {
            mode distance;
            levels $refinementRegionsLevels;
        }

    }
}

snapControls
{
    nSmoothPatch 3;
    nSmoothInternal 1; // OpenFOAM.com option
    tolerance 2.0;
    nSolveIter 30;
    nRelaxIter 4;
    nFeatureSnapIter 4;
    implicitFeatureSnap false;
    explicitFeatureSnap true;
    multiRegionFeatureSnap true;
    nFaceSplitInterval -1; // OpenFOAM.com option
    releasePoints false;  // multi-region related option
    stringFeatures true;
    avoidDiagonal false;
    strictRegionSnap false;
    concaveAngle 45;
    minAreaRatio 0.3;
}

addLayersControls
{
    // If 'true', thickness parameters (firstLayerThickness, minThickness, etc.)
    // are interpreted as a fraction of the local background cell size.
    // If 'false', they're treated as absolute distances in SI units (meters).
    relativeSizes true;

    // The fraction by which each subsequent layer grows
    expansionRatio 1.1;

    // The thickness of your first boundary-layer cell, relative to local cell size
    // if relativeSizes = true; or absolute thickness if relativeSizes = false.
    firstLayerThickness 1e-05;

    // If snappy can't achieve at least this fraction/absolute thickness,
    // it won't add a layer. (Again depends on 'relativeSizes'.)
    minThickness 0.01;

    // If initial layer insertion fails on a cell, snappy tries to grow from
    // neighboring cells up to nGrow layers away. Helps fill small misses.
    nGrow 0;

    // Controls how snappy identifies 'sharp' features to preserve or refine
    featureAngle 140;

    // (OpenFOAM.com) merges patch faces that meet at < this angle
    mergePatchFacesAngle 45;

    // (OpenFOAM.com) stops layering if extruded faces bend more than this angle
    layerTerminationAngle 55;

    // Ensures the new layer face thickness doesn't exceed some fraction of
    // the underlying cell face thickness. Helps control extreme aspect ratios.
    maxFaceThicknessRatio 0.8;

    // If set to 'true', snappy won't add layers at edges. 
    // Setting to 'false' tries to add them if possible.
    disableWallEdges true;

    // Smoothing of surface normals before and after layer addition
    nSmoothSurfaceNormals 4;
    nSmoothNormals 5;

    // Number of iterations to smooth out the layer thickness distribution
    nSmoothThickness 15;

    // Number of iterations to smooth the displacement vector field
    // used for layer extrusion
    nSmoothDisplacement 25;

    // (Advanced) Max iterations for medial axis analysis. 
    // The medial axis helps ensure layers don't overlap or blow up near tight curvatures.
    nMedialAxisIter 1000;

    // Minimum angles used in the medial axis analysis
    minMedianAxisAngle 90;
    minMedialAxisAngle 90;

    // Allows layers to be up to this fraction of the local distance to the medial axis
    maxThicknessToMedialRatio 0.5;

    // Another angle for advanced slip features
    slipFeatureAngle 30;

    // After failing or partial layering, tries relaxing constraints up to these iterations
    nRelaxIter 5;

    // The main layering loop tries up to nLayerIter times to inflate layers each pass
    nLayerIter 10;

    // Additional 'relaxed' passes (some parameters are eased) up to nRelaxedIter times
    nRelaxedIter 5;

    // (OpenFOAM.com) The outer layering loop can repeat up to nOuterIter passes 
    // if layers keep failing. A high number helps, but increases runtime.
    nOuterIter 8;

    // More verbose printouts in the log (helpful for debugging)
    additionalReporting false;

    // If > 0, snappy sets aside these cells from extrusion
    nBufferCellsNoExtrude 0;

    // Patch-specific layer settings go inside 'layers {}'
    layers
    {
        // For patch named "rocket" (must match your STL patch or region name)
        rocket
        {
            // Target number of layers on this patch
            nSurfaceLayers 5;

            // Optionally, you can override the global defaults (expansionRatio, etc.)
            expansionRatio 1.1;
            firstLayerThickness 0.1;
        }
    }
}


meshQualityControls
{
    // Maximum non-orthogonality allowed. 
    maxNonOrtho 80;  // Relaxed from 75 to 65 (common default)

    // Max skewness allowed.
    maxBoundarySkewness 4;  // Typical default for boundary faces
    maxInternalSkewness 20;   // Common value for internal skewness

    // Max concaveness allowed. 
    maxConcave 80;  // Standard value for moderate concave faces

    // Minimum projected area v.s. actual area. 
    minFlatness 0.5;  // Relaxed for general meshing; lower precision required

    // Minimum cell pyramid volume relative to min bounding box length^3.
    minVol 1e-30;  // Default is slightly lower for more flexibility

    // Minimum quality of tetrahedral cells.
    minTetQuality 1e-30;  // Relaxed from stricter stability (e.g., 1e-12)

    // Minimum face twist. Ensures cells are not overly twisted.
    minTwist 0.01;  // Loosened to allow slightly more twist (default range: 0.01-0.05)

    // Minimum normalized cell determinant.
    minDeterminant -1;  // Relaxed determinant for near-degenerate cells

    // Minimum face weight.
    minFaceWeight 0.01;  // Relaxed from 0.01 to prioritize mesh generation

    // Minimum volume ratio.
    minVolRatio 0.01;  // Typical for maintaining balanced cell sizes

    // Additional parameters (default: ignored if -1)
    minArea -1;          // Disable area checks (not commonly used)
    minTriangleTwist -1; // Disable triangle twist checks (not commonly used)

    // Advanced settings
    nSmoothScale 4;       // Reset to typical default for smoothing iterations
    errorReduction 0.75;  // Retain error reduction for balance

    relaxed
    {
          maxNonOrtho 180;

/*          minVolRatio 0.001;
          minFaceWeight 0.001;
          minDeterminant 0.0001;
          maxConcave 90;
          minTwist 0.1;
*/
    }
}

writeFlags      ( scalarLevels layerSets layerFields );

mergeTolerance  1e-06;
