/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#include "parameters.cs"

application     foamRun;

solver          fluid;

//startFrom       startTime;
startFrom       latestTime;


startTime       0;

stopAt          endTime;

endTime         3000;  

deltaT         1;

maxDeltaT       1;

writeControl    timeStep;

writeInterval   $WriteInterval;

purgeWrite      0;

writeFormat     ascii;

writePrecision  10;	

writeCompression off;

timeFormat      general;

timePrecision   10;	

writeCompression on;

runTimeModifiable true;

adjustTimeStep  true;

maxCo   0.5;

functions
{

    //#includeFunc residuals

    
    forceCoeffs
    {
        type            forceCoeffs;
        libs            ("libforces.so");
        writeControl    timeStep;
        writeInterval   1;

        patches
        (
            rocket
        );

        log         true;
        rhoInf      1;
        CofR        (0 0 0);
        liftDir     (0 1 0);
        dragDir     (1 0 0);
        pitchAxis   (0 0 1);
        magUInf     #calc "sqrt(pow($Ux * 1.0,2) + pow($Uy * 1.0,2) + pow($Uz * 1.0,2))";
        lRef        3;
        Aref        0.0188545853;
    }

    forces
    {
        type forces;                         // Function object for force calculation
        libs ("libforces.so"); // Library required for force calculations
        patches ("rocket");                  // Name of the boundary patch
        
        // Field names
        p               p;
        U               U;
        rho             rho;

        // Reference pressure [Pa]
        pRef            $P;
        log true;                            // Log results to a file

        // Optional: Specify center of rotation for moment calculation
        CofR (0 0 0);                        // Replace with the desired center of rotation
    }

    
    // yPlus calculation for wall boundary monitoring
    yPlus1
    {

        type            yPlus;
        libs            ("libfieldFunctionObjects.so");
        
        writePrecision  8;
        writeToFile     true;
        useUserTime     true;
        region          region0;
        enabled         true;
        log             true;
        timeStart       0;
        timeEnd         1000;
        executeControl  timeStep;
        executeInterval 1;
        writeControl    timeStep;
        writeInterval   $WriteInterval;
    }
    

    MachNo
    {
        // Mandatory entries
        type            MachNo;
        libs            ("libfieldFunctionObjects.so");
    
        // Field to use for Mach number calculation
        field           U;               // Velocity field
        rho             rho;             // Density field for compressible flows
        p               p;               // Pressure field for compressible flows
    
        // Optional (inherited) entries
        region          region0;         // Ensure the correct region
        enabled         true;            // Enable the function
        log             true;            // Write logs for debugging
    
        // Execution control
        timeStart       0;               // Start from the beginning of the simulation
        timeEnd         3;               // End at simulation stop time
        executeControl  $writeControl;         // Trigger function based on simulation time
        executeInterval $writeInterval;            // Execute every 0.01 seconds of simulation time
    
        // Write control
        writeControl    $writeControl;         // Save results based on runTime
        writeInterval   $writeInterval;            // Write every 0.01 seconds of simulation time
    }
    
    
    solverInfo
    {
        type            solverInfo;  // Function to print solver residuals
        libs            ("libutilityFunctionObjects.so");
    
        log             false;  // Enable logging of residuals
    
        fields
        (
            U
            p
            k
            omega
        );
    }
}

// ************************************************************************* //
