/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#include "../parameters.cs"

ddtSchemes
{
    default         steadyState;
}

gradSchemes
{
    default         cellLimited Gauss linear 1;

    grad(h) cellLimited Gauss linear 0.333;
    grad(p) cellLimited Gauss linear 0.333;
}

divSchemes
{
    default         none;

    div(phi,U)      bounded Gauss vanLeerV;//bounded Gauss linearUpwind limited;

    energy          bounded Gauss linearUpwind limited;
    div(phi,e)      $energy;
    div(phi,K)      $energy;
    div(phi,Ekp)    $energy;
    div(phi,h)      $energy;


    turbulence      bounded Gauss upwind;
    div(phi,k)      $turbulence;
    div(phi,omega)  $turbulence;

    //div(phid,p)     Gauss upwind;
    div(phid,p) Gauss limitedLinear 1;
    //div((phi|interpolate(rho)),p)  bounded Gauss upwind;

    div(((rho*nuEff)*dev2(T(grad(U)))))    Gauss linear;



    //potentialFlow
    //div(div(phi,U)) Gauss linear;

}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
    reconstruct(rho) vanAlbada;
    reconstruct(U) vanAlbadaV;
    reconstruct(T) vanAlbada;
}

snGradSchemes
{
    default         corrected;
}

wallDist
{
    method          meshWave;
}



// ************************************************************************* //